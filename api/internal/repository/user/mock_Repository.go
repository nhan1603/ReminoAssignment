// Code generated by mockery v2.20.0. DO NOT EDIT.

package user

import (
	context "context"

	model "github.com/nhan1603/ReminoAssignment/api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: _a0
func (_m *MockRepository) GetAll(_a0 context.Context) ([]model.User, error) {
	ret := _m.Called(_a0)

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCriteria provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetByCriteria(_a0 context.Context, _a1 GetUserInput) (model.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetUserInput) (model.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetUserInput) model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetUserInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
